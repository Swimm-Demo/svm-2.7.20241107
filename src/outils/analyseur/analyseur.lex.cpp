#line 2 "analyseur.lex.cpp"

#line 4 "analyseur.lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE outilssvmpluginanalyseurrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via outilssvmpluginanalyseurrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void outilssvmpluginanalyseurrestart (FILE *input_file ,yyscan_t yyscanner );
void outilssvmpluginanalyseur_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE outilssvmpluginanalyseur_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void outilssvmpluginanalyseur_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void outilssvmpluginanalyseur_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void outilssvmpluginanalyseurpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void outilssvmpluginanalyseurpop_buffer_state (yyscan_t yyscanner );

static void outilssvmpluginanalyseurensure_buffer_stack (yyscan_t yyscanner );
static void outilssvmpluginanalyseur_load_buffer_state (yyscan_t yyscanner );
static void outilssvmpluginanalyseur_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER outilssvmpluginanalyseur_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE outilssvmpluginanalyseur_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE outilssvmpluginanalyseur_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE outilssvmpluginanalyseur_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *outilssvmpluginanalyseuralloc (yy_size_t ,yyscan_t yyscanner );
void *outilssvmpluginanalyseurrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void outilssvmpluginanalyseurfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer outilssvmpluginanalyseur_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        outilssvmpluginanalyseurensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            outilssvmpluginanalyseur_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        outilssvmpluginanalyseurensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            outilssvmpluginanalyseur_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define outilssvmpluginanalyseurwrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 80
#define YY_END_OF_BUFFER 81
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[576] =
    {   0,
        0,    0,   14,   14,    0,    0,   81,   79,   76,   78,
       79,   79,   79,   79,   79,   79,   74,   75,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   79,   79,   79,    1,   78,    0,
        3,    0,    2,    0,    0,   77,    0,    0,    0,   10,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   14,   14,   14,    2,   14,
       14,   14,   10,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,    0,    0,
        0,    1,    0,    0,    0,    0,    6,    0,    0,    0,
        0,    4,    0,    0,    0,    0,    8,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       16,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   14,   14,   14,    6,   14,   14,   14,
        4,   14,   14,   14,    8,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       13,   11,   12,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   18,    0,    0,
        0,    0,    0,   35,    0,    0,    0,   39,    0,    0,
       43,    0,    0,    0,    0,    0,   49,    0,   51,    0,

        0,   54,    0,   56,    0,   58,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   70,    0,    0,
        0,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,    0,    0,    0,    0,    0,
        7,    0,    0,    0,    0,    0,    5,    0,    0,    0,
        0,    0,    9,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   61,   62,
        0,    0,    0,   66,    0,    0,    0,   71,   72,    0,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,    0,    0,    0,    0,    0,    0,    0,
       17,    0,    0,    0,   25,    0,   15,    0,    0,   19,
       29,    0,   31,   32,    0,   34,    0,    0,    0,    0,
       41,    0,    0,   45,    0,   47,    0,    0,    0,    0,
        0,    0,    0,   60,   63,    0,    0,    0,   68,    0,
        0,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,    0,    0,    0,    0,    0,    0,
        0,   28,    0,   36,   40,   37,    0,   42,   44,    0,
       48,    0,    0,    0,   55,    0,    0,    0,   65,   67,

        0,   73,   14,   14,   14,   14,   14,   14,   14,   14,
       26,   21,    0,    0,   30,    0,    0,    0,   38,    0,
        0,   52,    0,    0,    0,   64,   69,   14,   14,   14,
       14,   14,   14,   14,   27,    0,    0,   24,   23,   33,
        0,    0,    0,    0,    0,   14,   14,   14,   14,   14,
        0,    0,    0,    0,    0,   57,    0,   14,   14,   20,
        0,   46,    0,    0,    0,   14,   14,   22,   50,    0,
       59,   14,    0,   53,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    9,    1,    1,    1,
        1,    1,    1,    1,   10,   11,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,    1,
        1,    1,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   23,   36,   23,
        1,   37,    1,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   55,   64,    1,   65,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    5,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1
    } ;

static yyconst flex_int16_t yy_base[596] =
    {   0,
        0,    0,   64,   98,  127,    0,  846,  847,  847,  847,
      842,   76,   81,  780,  779,    0,  847,  778,  811,  822,
      806,  812,   59,  813,  100,  800,  804,  820,   30,   68,
       51,  771,  785,  788,  778,   96,  790,   85,  788,   66,
      784,   98,   76,  769,  782,    0,    0,  821,  156,  759,
      758,  193,    0,  757,  790,  801,  785,  791,  112,  792,
      189,  779,  783,  799,  788,  785,  192,    0,  847,  208,
      847,  212,  847,  807,  144,  847,  147,  229,  235,  847,
      238,  789,  789,  781,  121,  774,  787,  771,  782,  773,
      771,  769,  771,  780,  775,  738,  737,  153,  103,  751,

      737,  734,  169,  752,  113,  740,  176,  737,  168,  741,
      726,  728,  737,  726,  736,  743,  735,  737,  736,  190,
      726,  720,  718,  736,  718,    0,  244,  249,    0,  770,
      256,  262,    0,  265,  752,  752,  744,  204,  737,  750,
      734,  745,  736,  734,  732,  734,  743,  738,  733,  231,
      728,    0,  269,  754,  214,  691,  847,  271,  752,  245,
      689,  847,  279,  750,  243,  687,  847,  718,  728,  733,
      716,  729,  724,  715,  724,  725,  709,  708,  708,  721,
      847,  706,  698,  690,  683,  693,  690,  233,  675,  668,
      691,  673,  685,  688,  683,  684,  685,  672,  679,  682,

      666,  669,  660,  672,  673,  666,  662,  656,  665,  668,
      669,  657,  666,  664,  667,  655,  648,  656,  649,  643,
      650,  654,  641,  694,  268,  631,    0,  692,  276,  629,
        0,  690,  275,  627,    0,  658,  668,  673,  656,  669,
      664,  655,  664,  665,  649,  648,  648,  661,    0,  646,
      847,  659,  643,  286,  293,  295,  301,  303,  308,  310,
      312,  315,  319,  321,  325,  650,  648,  641,  642,  641,
      643,  639,  646,  650,  648,  649,  646,  847,  641,  621,
      608,  615,  610,  847,  615,  287,  599,  847,  598,  612,
      847,  595,  595,  596,  610,  596,  847,  599,  847,  589,

      600,  847,  594,  847,  587,  847,  600,  602,  596,  583,
      589,  597,  588,  587,  578,  583,  580,  847,  590,  589,
      584,  605,  603,  596,  597,  596,  598,  594,  601,  605,
      603,  604,  601,    0,  596,  332,  334,  339,  341,  345,
      847,  347,  349,  351,  353,  355,  847,  358,  360,  365,
      367,  369,  847,  599,  598,  593,  581,  583,  586,  589,
      584,  576,  582,  575,  581,  579,  558,  547,  559,  544,
      548,  543,  548,  558,  553,  543,  544,  550,  545,  545,
      540,  542,  546,  548,  529,  546,  537,  525,  847,  847,
      539,  522,  523,  847,  520,  533,  520,  847,  847,  523,

      557,  556,  551,  539,  541,  544,  547,  542,  534,  540,
      533,  539,  537,  371,  376,  378,  380,  382,  384,  536,
      847,  534,  544,  526,  847,  541,  847,  533,  540,  847,
      847,  535,  847,  847,  504,  847,  495,  509,  508,  498,
      847,  491,  490,  847,  493,  847,  503,  488,  501,  493,
      499,  494,  499,  847,  847,  489,  485,  483,  847,  489,
      483,  508,    0,  506,  516,  498,    0,  513,    0,  505,
      512,    0,    0,  507,  494,  499,  492,  495,  504,  503,
      502,  847,  466,  847,  847,  847,  460,  847,  847,  459,
      847,  477,  458,  467,  847,  461,  473,  468,  847,  847,

      453,  847,  477,  482,  475,  478,  487,  486,  485,    0,
      471,  847,  479,  468,  847,  469,  468,  452,  847,  449,
      437,  847,  437,  450,  434,  847,  847,  460,    0,  468,
      457,    0,  458,  457,  847,  459,  402,  847,  847,  847,
      366,  362,  350,  320,  320,    0,  338,  324,    0,    0,
      313,  304,  268,  256,  244,  847,  242,  267,  264,  847,
      165,  847,  112,   90,   58,    0,   72,  847,  847,   23,
      847,    0,   19,  847,  847,  390,  395,  400,  403,  407,
      412,  417,  420,  425,  430,  435,  440,  445,  450,  455,
      460,  465,  470,  475,  480

    } ;

static yyconst flex_int16_t yy_def[596] =
    {   0,
      575,    1,  576,  576,    1,    5,  575,  575,  575,  575,
      575,  577,  578,  575,  575,  579,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  580,  580,  580,  581,  580,
      580,  582,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  575,  575,  575,  583,  575,  577,
      575,  577,  575,  577,  578,  575,  578,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  580,  581,  581,  580,  581,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  575,  575,
      575,  583,  584,  575,  575,  575,  575,  585,  575,  575,
      575,  575,  586,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      575,  575,  575,  587,  584,  587,  588,  589,  585,  589,
      590,  591,  586,  591,  592,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  587,  587,  584,  593,  593,
      575,  589,  589,  585,  594,  594,  575,  591,  591,  586,
      595,  595,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  593,  593,  594,  594,  595,  595,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  580,  580,  580,  580,  580,  580,  580,  580,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  580,  580,  580,
      580,  580,  580,  580,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  580,  580,  580,  580,  580,
      575,  575,  575,  575,  575,  575,  575,  580,  580,  575,
      575,  575,  575,  575,  575,  580,  580,  575,  575,  575,
      575,  580,  575,  575,    0,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575

    } ;

static yyconst flex_int16_t yy_nxt[913] =
    {   0,
        8,    9,   10,   11,    9,   12,   13,   14,   15,   16,
       17,    8,   18,   19,    8,    8,   20,    8,   21,    8,
        8,   22,    8,    8,    8,    8,   23,   24,    8,    8,
       25,   26,   27,    8,   28,    8,    8,    8,   29,    8,
       30,   31,   32,   33,    8,   34,   35,    8,    8,   36,
       37,   38,   39,   40,    8,   41,   42,   43,   44,   45,
        8,    8,    8,    8,    8,   47,   10,   48,   47,   49,
      574,   50,   51,   52,   53,  573,   54,   55,   71,   72,
       56,   73,   57,   76,   77,   58,   86,   96,   97,  102,
       59,   60,   87,  103,   61,   62,   63,  572,   64,   47,

       10,   48,   47,   49,  114,   50,   51,   52,   53,  571,
       54,   55,   74,   98,   56,   89,   57,   90,  122,   58,
       99,  115,  123,  100,   59,   60,  101,  111,   61,   62,
       63,   91,   64,    8,  108,   92,  570,  112,  117,  139,
      118,   65,  109,  119,  187,  140,   76,   77,   66,   76,
       77,  171,  172,  188,  189,  120,  190,   67,   71,  128,
      121,  129,  199,  569,  200,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
      568,  185,  130,  126,  126,  186,  126,  126,  126,  126,

      126,  126,  126,  126,  142,  126,  143,   89,  205,   90,
       71,   72,  194,   73,   71,   72,  202,   73,  195,  206,
      144,  156,  203,  151,  145,  196,  197,   92,  217,  126,
      126,  153,  154,  155,  239,  240,  156,  158,  159,  160,
      163,  164,  165,  161,   74,  218,   71,  128,   74,  129,
      166,   71,  128,  161,  129,  166,  126,  126,  153,  224,
      225,  171,  252,  226,  158,  228,  229,  163,  232,  233,
      230,  255,  256,  259,  260,  226,  257,  234,  157,  261,
      130,  263,  264,  285,  230,  130,  286,  234,  255,  337,
      567,  265,  566,  157,  565,  255,  256,  338,  337,  162,

      257,  564,  167,  255,  340,  259,  343,  167,  563,  162,
      259,  260,  344,  343,  259,  346,  261,  263,  349,  562,
      227,  263,  264,  350,  349,  372,  231,  263,  352,  235,
      561,  265,  227,  373,  255,  337,  255,  337,  560,  235,
      231,  255,  256,  255,  415,  559,  257,  338,  415,  259,
      343,  259,  343,  259,  260,  259,  417,  344,  417,  261,
      263,  349,  263,  349,  558,  341,  557,  263,  264,  263,
      419,  350,  419,  255,  415,  556,  347,  265,  255,  415,
      259,  417,  259,  417,  263,  419,  263,  419,  555,  353,
       46,   46,   46,   46,   46,   70,   70,   70,   70,   70,

       75,   75,   75,   75,   75,   80,   80,  126,  554,  126,
      126,  126,  127,  127,  127,  127,  127,  133,  553,  133,
      133,  133,  152,  552,  152,  254,  254,  254,  254,  254,
      258,  258,  258,  258,  258,  262,  262,  262,  262,  262,
      336,  336,  336,  336,  336,  339,  339,  339,  339,  339,
      342,  342,  342,  342,  342,  345,  345,  345,  345,  345,
      348,  348,  348,  348,  348,  351,  351,  351,  351,  351,
      414,  414,  414,  414,  414,  416,  416,  416,  416,  416,
      418,  418,  418,  418,  418,  551,  550,  549,  548,  547,
      546,  545,  544,  543,  542,  541,  540,  539,  538,  537,

      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  505,  504,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,

      436,  435,  434,  433,  432,  431,  430,  429,  428,  427,
      426,  425,  424,  423,  422,  421,  420,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  371,  370,  369,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  354,  276,  270,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  323,
      322,  235,  163,  231,  158,  227,  153,  321,  320,  319,

      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  291,  290,  289,
      288,  287,  284,  283,  282,  281,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  167,  163,  162,  158,  157,  153,  253,  251,  250,
      249,  248,  247,  246,  245,  244,  243,  242,  241,  238,
      237,  236,  575,  223,  222,  221,  220,  219,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  204,  201,
      198,  193,  192,  191,  184,  183,  182,  181,  180,  179,

      178,  177,  176,  175,  174,  173,  170,  169,  168,  575,
      150,  149,  148,  147,  146,  141,  138,  137,  136,  135,
      134,  132,  131,   69,  125,  124,  116,  113,  110,  107,
      106,  105,  104,   95,   94,   93,   88,   85,   84,   83,
       82,   81,   79,   78,   69,  575,    7,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575
    } ;

static yyconst flex_int16_t yy_chk[913] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
      573,    3,    3,    3,    3,  570,    3,    3,   12,   12,
        3,   12,    3,   13,   13,    3,   23,   29,   29,   31,
        3,    3,   23,   31,    3,    3,    3,  567,    3,    4,

        4,    4,    4,    4,   40,    4,    4,    4,    4,  565,
        4,    4,   12,   30,    4,   25,    4,   25,   43,    4,
       30,   40,   43,   30,    4,    4,   30,   38,    4,    4,
        4,   25,    4,    5,   36,   25,  564,   38,   42,   59,
       42,    5,   36,   42,   99,   59,   75,   75,    5,   77,
       77,   85,   85,   99,   99,   42,   99,    5,   49,   49,
       42,   49,  105,  563,  105,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      561,   98,   49,   52,   52,   98,   52,   52,   52,   52,

       52,   52,   52,   52,   61,   52,   61,   67,  109,   67,
       70,   70,  103,   70,   72,   72,  107,   72,  103,  109,
       61,  155,  107,   67,   61,  103,  103,   67,  120,   52,
       52,   78,   78,   78,  138,  138,   78,   79,   79,   79,
       81,   81,   81,   79,   70,  120,  127,  127,   72,  127,
       81,  128,  128,  160,  128,  165,   52,   52,  131,  131,
      131,  150,  150,  131,  132,  132,  132,  134,  134,  134,
      132,  153,  153,  158,  158,  225,  153,  134,  155,  158,
      127,  163,  163,  188,  229,  128,  188,  233,  254,  254,
      559,  163,  558,   78,  557,  255,  255,  256,  256,   79,

      255,  555,   81,  257,  257,  258,  258,  165,  554,  160,
      259,  259,  260,  260,  261,  261,  259,  262,  262,  553,
      131,  263,  263,  264,  264,  286,  132,  265,  265,  134,
      552,  263,  225,  286,  336,  336,  337,  337,  551,  233,
      229,  338,  338,  339,  339,  548,  338,  340,  340,  342,
      342,  343,  343,  344,  344,  345,  345,  346,  346,  344,
      348,  348,  349,  349,  547,  257,  545,  350,  350,  351,
      351,  352,  352,  414,  414,  544,  261,  350,  415,  415,
      416,  416,  417,  417,  418,  418,  419,  419,  543,  265,
      576,  576,  576,  576,  576,  577,  577,  577,  577,  577,

      578,  578,  578,  578,  578,  579,  579,  580,  542,  580,
      580,  580,  581,  581,  581,  581,  581,  582,  541,  582,
      582,  582,  583,  537,  583,  584,  584,  584,  584,  584,
      585,  585,  585,  585,  585,  586,  586,  586,  586,  586,
      587,  587,  587,  587,  587,  588,  588,  588,  588,  588,
      589,  589,  589,  589,  589,  590,  590,  590,  590,  590,
      591,  591,  591,  591,  591,  592,  592,  592,  592,  592,
      593,  593,  593,  593,  593,  594,  594,  594,  594,  594,
      595,  595,  595,  595,  595,  536,  534,  533,  531,  530,
      528,  525,  524,  523,  521,  520,  518,  517,  516,  514,

      513,  511,  509,  508,  507,  506,  505,  504,  503,  501,
      498,  497,  496,  494,  493,  492,  490,  487,  483,  481,
      480,  479,  478,  477,  476,  475,  474,  471,  470,  468,
      466,  465,  464,  462,  461,  460,  458,  457,  456,  453,
      452,  451,  450,  449,  448,  447,  445,  443,  442,  440,
      439,  438,  437,  435,  432,  429,  428,  426,  424,  423,
      422,  420,  413,  412,  411,  410,  409,  408,  407,  406,
      405,  404,  403,  402,  401,  400,  397,  396,  395,  393,
      392,  391,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,

      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  356,  355,  354,  335,  333,  332,
      331,  330,  329,  328,  327,  326,  325,  324,  323,  322,
      321,  320,  319,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  305,  303,  301,  300,  298,  296,
      295,  294,  293,  292,  290,  289,  287,  285,  283,  282,
      281,  280,  279,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  253,  252,  250,  248,  247,
      246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      236,  234,  232,  230,  228,  226,  224,  223,  222,  221,

      220,  219,  218,  217,  216,  215,  214,  213,  212,  211,
      210,  209,  208,  207,  206,  205,  204,  203,  202,  201,
      200,  199,  198,  197,  196,  195,  194,  193,  192,  191,
      190,  189,  187,  186,  185,  184,  183,  182,  180,  179,
      178,  177,  176,  175,  174,  173,  172,  171,  170,  169,
      168,  166,  164,  161,  159,  156,  154,  151,  149,  148,
      147,  146,  145,  144,  143,  142,  141,  140,  139,  137,
      136,  135,  130,  125,  124,  123,  122,  121,  119,  118,
      117,  116,  115,  114,  113,  112,  111,  110,  108,  106,
      104,  102,  101,  100,   97,   96,   95,   94,   93,   92,

       91,   90,   89,   88,   87,   86,   84,   83,   82,   74,
       66,   65,   64,   63,   62,   60,   58,   57,   56,   55,
       54,   51,   50,   48,   45,   44,   41,   39,   37,   35,
       34,   33,   32,   28,   27,   26,   24,   22,   21,   20,
       19,   18,   15,   14,   11,    7,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
/*
 * Simple Virtual Machine - A versatile and robust architecture to
 * easily write applications.
 * Copyright (C) 2021  Julien BRUGUIER
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#line 21 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
#include <src/global/global.h>
#include <src/outils/analyseur/includes.h>

#define YY_USER_ACTION yylloc->first_line = yylloc->last_line;



#line 858 "analyseur.lex.cpp"

#define INITIAL 0
#define PARAM 1
#define NOM 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int outilssvmpluginanalyseurlex_init (yyscan_t* scanner);

int outilssvmpluginanalyseurlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int outilssvmpluginanalyseurlex_destroy (yyscan_t yyscanner );

int outilssvmpluginanalyseurget_debug (yyscan_t yyscanner );

void outilssvmpluginanalyseurset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE outilssvmpluginanalyseurget_extra (yyscan_t yyscanner );

void outilssvmpluginanalyseurset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *outilssvmpluginanalyseurget_in (yyscan_t yyscanner );

void outilssvmpluginanalyseurset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *outilssvmpluginanalyseurget_out (yyscan_t yyscanner );

void outilssvmpluginanalyseurset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t outilssvmpluginanalyseurget_leng (yyscan_t yyscanner );

char *outilssvmpluginanalyseurget_text (yyscan_t yyscanner );

int outilssvmpluginanalyseurget_lineno (yyscan_t yyscanner );

void outilssvmpluginanalyseurset_lineno (int line_number ,yyscan_t yyscanner );

int outilssvmpluginanalyseurget_column  (yyscan_t yyscanner );

void outilssvmpluginanalyseurset_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * outilssvmpluginanalyseurget_lval (yyscan_t yyscanner );

void outilssvmpluginanalyseurset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *outilssvmpluginanalyseurget_lloc (yyscan_t yyscanner );
    
        void outilssvmpluginanalyseurset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int outilssvmpluginanalyseurwrap (yyscan_t yyscanner );
#else
extern int outilssvmpluginanalyseurwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int outilssvmpluginanalyseurlex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int outilssvmpluginanalyseurlex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			outilssvmpluginanalyseurensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				outilssvmpluginanalyseur_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		outilssvmpluginanalyseur_load_buffer_state(yyscanner );
		}

	{
#line 38 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"

#line 1136 "analyseur.lex.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 576 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 847 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 39 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ yylval->chaine = std::string(yytext,yyleng); return IDENTIFIANT; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 40 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ std::string token(yytext,yyleng); yylval->chaine = SVM::Global::Chaine::desechappe(token.substr(1,token.size()-2)); return CHAINE; }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 41 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return _INVALIDE_; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ yylval->chaine = ""; return TEXTE; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 43 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ std::string token(yytext,yyleng); yylloc->last_line+=std::count(token.begin(),token.end(),'\n'); yylval->chaine = (token.size()==5)?std::string():token.substr(3,token.size()-6); /*std::cerr << "{{{" << yylval->chaine << "}}}";*/ return TEXTE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 44 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ yylval->chaine = ""; return TEXTE; }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 45 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ std::string token(yytext,yyleng); yylloc->last_line+=std::count(token.begin(),token.end(),'\n'); yylval->chaine = (token.size()==5)?std::string():token.substr(3,token.size()-6); /*std::cerr << "{{{" << yylval->chaine << "}}}";*/ return TEXTE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 46 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ yylval->chaine = ""; return TEXTE; }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 47 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ std::string token(yytext,yyleng); yylloc->last_line+=std::count(token.begin(),token.end(),'\n'); yylval->chaine = (token.size()==5)?std::string():token.substr(3,token.size()-6); /*std::cerr << "{{{" << yylval->chaine << "}}}";*/ return TEXTE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ std::string token(yytext,yyleng); yylval->chaine = token.substr(1); return VALEUR_OPTION; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 49 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return TYPE_ENTIER; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 50 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return TYPE_CHAINE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return TYPE_BOOLEEN; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 52 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ yylval->chaine=std::string(yytext,yyleng); ;BEGIN(INITIAL); return PARAMETRES; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 53 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(NOM); return PLUGIN; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 54 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return USE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 55 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return DEFINE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 56 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(NOM); return TYPE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 57 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(NOM); return STRUCT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 58 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(PARAM); return INSTRUCTION; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 59 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(PARAM); return FUNCTION; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 60 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(NOM); return INTERRUPTION; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 61 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(NOM); return SEQUENCER; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 62 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(NOM); return SCHEDULER; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 63 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(NOM); return OPTION; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 64 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(NOM); return ARGUMENT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 65 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(NOM); return ARGUMENTS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 66 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return WAITING; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 67 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return SYSTEM; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 68 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return OVERRIDE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 69 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return ATTACH; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 70 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return AUTHOR; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 71 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return CHANGELOG; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 72 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return CHECKS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 73 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return CODE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 74 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(NOM); return COMMENT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 75 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return COMPILE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 76 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return CONSTANT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return COPY; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return COMPARE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 79 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return CREATE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 80 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return CURRENT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 81 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return DATE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 82 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return DEFAULT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 83 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return DELETE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 84 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return DESCRIPTION; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 85 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return DETACH; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 86 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return EXAMPLE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 87 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(NOM); return EXTRA_FILE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 88 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return FINALISATION; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 89 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return HELP; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 90 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return INCLUDES; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 91 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return INITIALISATION; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 92 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return LANG; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 93 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return LICENSE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 94 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return LINK; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 95 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return MAINTAINER; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 96 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return NEWS; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 97 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return NOTIFICATION; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 98 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return OBJECT; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 99 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return PATCH; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 100 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return PRINT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 101 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return README; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 102 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return SCHEDULE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 103 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return SEEALSO; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 104 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return SHELL; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 105 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return STARTUP; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 106 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return STRING; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 107 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return SYNOPSIS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 108 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return TEST; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 109 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return TITLE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 110 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return USAGE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 111 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return PLUGIN_VERSION; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 112 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return POINT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 113 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ BEGIN(INITIAL); return DEUX_POINTS; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 114 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 115 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ ++yylloc->last_line; }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 116 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ ++yylloc->last_line; /* nouvelle ligne */ BEGIN(INITIAL); return FIN_LIGNE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 117 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
{ return _INVALIDE_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 118 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"
ECHO;
	YY_BREAK
#line 1599 "analyseur.lex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARAM):
case YY_STATE_EOF(NOM):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * outilssvmpluginanalyseurlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( outilssvmpluginanalyseurwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of outilssvmpluginanalyseurlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					outilssvmpluginanalyseurrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			outilssvmpluginanalyseurrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) outilssvmpluginanalyseurrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 576 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 576 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 575);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					outilssvmpluginanalyseurrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( outilssvmpluginanalyseurwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void outilssvmpluginanalyseurrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        outilssvmpluginanalyseurensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            outilssvmpluginanalyseur_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	outilssvmpluginanalyseur_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	outilssvmpluginanalyseur_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void outilssvmpluginanalyseur_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		outilssvmpluginanalyseurpop_buffer_state();
	 *		outilssvmpluginanalyseurpush_buffer_state(new_buffer);
     */
	outilssvmpluginanalyseurensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	outilssvmpluginanalyseur_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (outilssvmpluginanalyseurwrap()) processing, but the only time this flag
	 * is looked at is after outilssvmpluginanalyseurwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void outilssvmpluginanalyseur_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE outilssvmpluginanalyseur_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) outilssvmpluginanalyseuralloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in outilssvmpluginanalyseur_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) outilssvmpluginanalyseuralloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in outilssvmpluginanalyseur_create_buffer()" );

	b->yy_is_our_buffer = 1;

	outilssvmpluginanalyseur_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with outilssvmpluginanalyseur_create_buffer()
 * @param yyscanner The scanner object.
 */
    void outilssvmpluginanalyseur_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		outilssvmpluginanalyseurfree((void *) b->yy_ch_buf ,yyscanner );

	outilssvmpluginanalyseurfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a outilssvmpluginanalyseurrestart() or at EOF.
 */
    static void outilssvmpluginanalyseur_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	outilssvmpluginanalyseur_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then outilssvmpluginanalyseur_init_buffer was _probably_
     * called from outilssvmpluginanalyseurrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void outilssvmpluginanalyseur_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		outilssvmpluginanalyseur_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void outilssvmpluginanalyseurpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	outilssvmpluginanalyseurensure_buffer_stack(yyscanner);

	/* This block is copied from outilssvmpluginanalyseur_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from outilssvmpluginanalyseur_switch_to_buffer. */
	outilssvmpluginanalyseur_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void outilssvmpluginanalyseurpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	outilssvmpluginanalyseur_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		outilssvmpluginanalyseur_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void outilssvmpluginanalyseurensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)outilssvmpluginanalyseuralloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in outilssvmpluginanalyseurensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)outilssvmpluginanalyseurrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in outilssvmpluginanalyseurensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE outilssvmpluginanalyseur_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) outilssvmpluginanalyseuralloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in outilssvmpluginanalyseur_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	outilssvmpluginanalyseur_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to outilssvmpluginanalyseurlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       outilssvmpluginanalyseur_scan_bytes() instead.
 */
YY_BUFFER_STATE outilssvmpluginanalyseur_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return outilssvmpluginanalyseur_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to outilssvmpluginanalyseurlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE outilssvmpluginanalyseur_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) outilssvmpluginanalyseuralloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in outilssvmpluginanalyseur_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = outilssvmpluginanalyseur_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in outilssvmpluginanalyseur_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE outilssvmpluginanalyseurget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int outilssvmpluginanalyseurget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int outilssvmpluginanalyseurget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *outilssvmpluginanalyseurget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *outilssvmpluginanalyseurget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t outilssvmpluginanalyseurget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *outilssvmpluginanalyseurget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void outilssvmpluginanalyseurset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void outilssvmpluginanalyseurset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "outilssvmpluginanalyseurset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void outilssvmpluginanalyseurset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "outilssvmpluginanalyseurset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see outilssvmpluginanalyseur_switch_to_buffer
 */
void outilssvmpluginanalyseurset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void outilssvmpluginanalyseurset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int outilssvmpluginanalyseurget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void outilssvmpluginanalyseurset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * outilssvmpluginanalyseurget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void outilssvmpluginanalyseurset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *outilssvmpluginanalyseurget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void outilssvmpluginanalyseurset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* outilssvmpluginanalyseurlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int outilssvmpluginanalyseurlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) outilssvmpluginanalyseuralloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* outilssvmpluginanalyseurlex_init_extra has the same functionality as outilssvmpluginanalyseurlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to outilssvmpluginanalyseuralloc in
 * the yyextra field.
 */

int outilssvmpluginanalyseurlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    outilssvmpluginanalyseurset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) outilssvmpluginanalyseuralloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    outilssvmpluginanalyseurset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from outilssvmpluginanalyseurlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * outilssvmpluginanalyseurlex_init()
     */
    return 0;
}

/* outilssvmpluginanalyseurlex_destroy is for both reentrant and non-reentrant scanners. */
int outilssvmpluginanalyseurlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		outilssvmpluginanalyseur_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		outilssvmpluginanalyseurpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	outilssvmpluginanalyseurfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        outilssvmpluginanalyseurfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * outilssvmpluginanalyseurlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    outilssvmpluginanalyseurfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *outilssvmpluginanalyseuralloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *outilssvmpluginanalyseurrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void outilssvmpluginanalyseurfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see outilssvmpluginanalyseurrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 118 "/home/pappy/Programmation/svm/projet/src/outils/analyseur/analyseur.lex.lpp"



